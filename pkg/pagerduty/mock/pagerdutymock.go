// Code generated by MockGen. DO NOT EDIT.
// Source: pagerduty.go
//
// Generated by this command:
//
//	mockgen --build_flags=--mod=readonly -source pagerduty.go -destination ./mock/pagerdutymock.go -package pdmock
//

// Package pdmock is a generated GoMock package.
package pdmock

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
	isgomock struct{}
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// AddNote mocks base method.
func (m *MockClient) AddNote(notes string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNote", notes)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddNote indicates an expected call of AddNote.
func (mr *MockClientMockRecorder) AddNote(notes any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNote", reflect.TypeOf((*MockClient)(nil).AddNote), notes)
}

// EscalateIncident mocks base method.
func (m *MockClient) EscalateIncident() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EscalateIncident")
	ret0, _ := ret[0].(error)
	return ret0
}

// EscalateIncident indicates an expected call of EscalateIncident.
func (mr *MockClientMockRecorder) EscalateIncident() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EscalateIncident", reflect.TypeOf((*MockClient)(nil).EscalateIncident))
}

// EscalateIncidentWithNote mocks base method.
func (m *MockClient) EscalateIncidentWithNote(notes string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EscalateIncidentWithNote", notes)
	ret0, _ := ret[0].(error)
	return ret0
}

// EscalateIncidentWithNote indicates an expected call of EscalateIncidentWithNote.
func (mr *MockClientMockRecorder) EscalateIncidentWithNote(notes any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EscalateIncidentWithNote", reflect.TypeOf((*MockClient)(nil).EscalateIncidentWithNote), notes)
}

// GetServiceID mocks base method.
func (m *MockClient) GetServiceID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetServiceID indicates an expected call of GetServiceID.
func (mr *MockClientMockRecorder) GetServiceID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceID", reflect.TypeOf((*MockClient)(nil).GetServiceID))
}

// SilenceIncident mocks base method.
func (m *MockClient) SilenceIncident() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SilenceIncident")
	ret0, _ := ret[0].(error)
	return ret0
}

// SilenceIncident indicates an expected call of SilenceIncident.
func (mr *MockClientMockRecorder) SilenceIncident() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SilenceIncident", reflect.TypeOf((*MockClient)(nil).SilenceIncident))
}

// SilenceIncidentWithNote mocks base method.
func (m *MockClient) SilenceIncidentWithNote(notes string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SilenceIncidentWithNote", notes)
	ret0, _ := ret[0].(error)
	return ret0
}

// SilenceIncidentWithNote indicates an expected call of SilenceIncidentWithNote.
func (mr *MockClientMockRecorder) SilenceIncidentWithNote(notes any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SilenceIncidentWithNote", reflect.TypeOf((*MockClient)(nil).SilenceIncidentWithNote), notes)
}

// UpdateIncidentTitle mocks base method.
func (m *MockClient) UpdateIncidentTitle(title string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIncidentTitle", title)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateIncidentTitle indicates an expected call of UpdateIncidentTitle.
func (mr *MockClientMockRecorder) UpdateIncidentTitle(title any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIncidentTitle", reflect.TypeOf((*MockClient)(nil).UpdateIncidentTitle), title)
}
